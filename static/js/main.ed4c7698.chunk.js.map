{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","newItem","list","toDoValue","id","Date","now","value","isDone","this","push","setState","updatedList","filter","item","input","src","logo","alt","width","height","className","type","placeholder","required","onChange","e","updatedInput","target","onClick","addItem","disabled","length","map","key","name","checked","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,kC,8MC6G5BC,G,wDAxGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,KAAM,IAJS,E,oDAQXC,GACN,GAAkB,KAAdA,EAAkB,CACpB,IAAMF,EAAU,CACdG,GAAIC,KAAKC,MACTC,MAAOJ,EACPK,QAAQ,GAKJN,EAAI,YAAOO,KAAKT,MAAME,MAC5BA,EAAKQ,KAAKT,GAEVQ,KAAKE,SAAS,CACZT,OACAD,QAAS,Q,iCAKJG,GACT,IACMQ,EADI,YAAOH,KAAKT,MAAME,MACHW,QAAO,SAACC,GAAD,OAAUA,EAAKV,KAAOA,KACtDK,KAAKE,SAAS,CACZT,KAAMU,M,mCAIGG,GACXN,KAAKE,SAAS,CACZV,QAASc,M,+BAIH,IAAD,OACP,OACE,6BACE,gCACE,yBAAKC,IAAKC,IAAMC,IAAI,MAAMC,MAAM,MAAMC,OAAO,MAAMC,UAAU,UAE/D,wBAAIA,UAAU,aAAd,SACA,yBAAKA,UAAU,aAAf,kBAEE,6BACA,2BACEC,KAAK,OACLD,UAAU,aACVE,YAAY,eACZC,UAAQ,EACRjB,MAAOE,KAAKT,MAAMC,QAClBwB,SAAU,SAACC,GAAD,OAAO,EAAKC,aAAaD,EAAEE,OAAOrB,UAE9C,4BACEc,UAAU,UACVQ,QAAS,kBAAM,EAAKC,QAAQ,EAAK9B,MAAMC,UACvC8B,UAAWtB,KAAKT,MAAMC,QAAQ+B,QAHhC,YAOA,yBAAKX,UAAU,QACb,4BACGZ,KAAKT,MAAME,KAAK+B,KAAI,SAACnB,GACpB,OAEE,wBAAIoB,IAAKpB,EAAKV,IACZ,2BACEkB,KAAK,WACLa,KAAK,SACLC,QAAStB,EAAKN,OACdiB,SAAU,eAEXX,EAAKP,MACN,4BACEc,UAAU,MACVQ,QAAS,WACP,EAAKQ,WAAWvB,EAAKV,MAHzB,cAWN,4BACE,2BAAOkB,KAAK,aADd,wBAGE,4BAAQD,UAAU,OAAlB,mB,GA/FEiB,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ed4c7698.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newItem: \"\",\r\n      list: [],\r\n    };\r\n  }\r\n\r\n  addItem(toDoValue) {\r\n    if (toDoValue !== \"\") {\r\n      const newItem = {\r\n        id: Date.now(),\r\n        value: toDoValue,\r\n        isDone: false,\r\n      };\r\n\r\n      // add all items of this.state.list to const list array using spread operator\r\n      // or we can say a copy of list\r\n      const list = [...this.state.list];\r\n      list.push(newItem);\r\n\r\n      this.setState({\r\n        list, // js is smart enough to capture same name variable\r\n        newItem: \"\",\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteItem(id) {\r\n    const list = [...this.state.list];\r\n    const updatedList = list.filter((item) => item.id !== id);\r\n    this.setState({\r\n      list: updatedList,\r\n    });\r\n  }\r\n\r\n  updatedInput(input) {\r\n    this.setState({\r\n      newItem: input,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <center>\r\n          <img src={logo} alt=\"img\" width=\"100\" height=\"100\" className=\"logo\" />\r\n        </center>\r\n        <h1 className=\"app-title\">To Do</h1>\r\n        <div className=\"container\">\r\n          Add an Item....\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            className=\"input-text\"\r\n            placeholder=\"Write a ToDo\"\r\n            required\r\n            value={this.state.newItem}\r\n            onChange={(e) => this.updatedInput(e.target.value)}\r\n          />\r\n          <button\r\n            className=\"add-btn\"\r\n            onClick={() => this.addItem(this.state.newItem)}\r\n            disabled={!this.state.newItem.length} // for eg. 5 is true, then {!true} becomes false making disabled as false\r\n          >\r\n            Add ToDo\r\n          </button>\r\n          <div className=\"list\">\r\n            <ul>\r\n              {this.state.list.map((item) => {\r\n                return (\r\n                  // key is given to proove that the items are unique\r\n                  <li key={item.id}>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"idDone\"\r\n                      checked={item.isDone}\r\n                      onChange={() => {}}\r\n                    />\r\n                    {item.value}\r\n                    <button\r\n                      className=\"btn\"\r\n                      onClick={() => {\r\n                        this.deleteItem(item.id);\r\n                      }}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </li>\r\n                );\r\n              })}\r\n              <li>\r\n                <input type=\"checkbox\" />\r\n                Record Youtube videos\r\n                <button className=\"btn\">Delete</button>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}